<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Echo</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Echo</description>
    <generator>Hugo</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 03 Jun 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>面试专题 ＃1 - Java基础</title>
      <link>http://localhost:1313/interview/topic-1/</link>
      <pubDate>Mon, 03 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/interview/topic-1/</guid>
      <description></description>
    </item>
    <item>
      <title>TV记录</title>
      <link>http://localhost:1313/navigation/tv/</link>
      <pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/navigation/tv/</guid>
      <description>&lt;h2 id=&#34;2024&#34;&gt;2024&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;[4/23]  最后生还者-第一季&lt;/li&gt;&#xA;&lt;li&gt;[6/21]  狂飙&lt;/li&gt;&#xA;&lt;li&gt;[12/14]  行尸走肉-第一季&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>闲游记 ＃0 - 序</title>
      <link>http://localhost:1313/loiter/travel-0/</link>
      <pubDate>Sat, 23 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/loiter/travel-0/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;世界那么大，我想去看看&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>周末游记 ＃0 - 序</title>
      <link>http://localhost:1313/weekend-travels/week-0/</link>
      <pubDate>Sat, 23 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/weekend-travels/week-0/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;世界那么大，我想去看看&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>《人月神话》的观点：是或非？</title>
      <link>http://localhost:1313/book/the-mythical-man-month/</link>
      <pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/book/the-mythical-man-month/</guid>
      <description>&lt;h2 id=&#34;第1章-焦油坑&#34;&gt;第1章 焦油坑&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;编程系统产品（Programming Systems Product）开发的工作量是供个人使用的、独立开发的构件程序的9倍。我估计软件构件产品化引起了3倍工作量，将软件构件整合成完整系统所需要的设计、集成和测试又强加了3倍的工作量，这些高成本的构件在根本上是相互独立的&lt;/li&gt;&#xA;&lt;li&gt;编程行业&amp;quot;满足我们内心深处的创造渴望和愉悦所有人的共有情感&amp;quot;，其提供了五种乐趣：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建事物的快乐&lt;/li&gt;&#xA;&lt;li&gt;开发对其他人有用的东西的乐趣&lt;/li&gt;&#xA;&lt;li&gt;将可以活动、相互啮合的零部件组装成类似迷宫的东西，这个过程所体现出令人神魂颠倒的魅力&lt;/li&gt;&#xA;&lt;li&gt;面对不重复的任务，不断学习的乐趣&lt;/li&gt;&#xA;&lt;li&gt;工作在如此易于驾驭的介质上的乐趣&amp;ndash;纯粹的思维活动&amp;ndash;其存在、移动和运转方式完全不同于实际物体&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;同样，这个行业具有一些内在固有的苦恼：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将做事方式调整到追求完美是学习编程的最困难部分&lt;/li&gt;&#xA;&lt;li&gt;由其他人来设定目标，并且必须依靠自己无法控制的事物（特别是程序）；权威不等同于责任&lt;/li&gt;&#xA;&lt;li&gt;实际情况看起来要比这点好一些：真正的权威来自于每次任务的完成&lt;/li&gt;&#xA;&lt;li&gt;任何创造性活动都伴随着枯燥艰苦的劳动，编程也不例外&lt;/li&gt;&#xA;&lt;li&gt;人们通常期望项目在接近结束时，软件项目能收敛得快一些，然而，情况却是越接近完成，收敛得越慢&lt;/li&gt;&#xA;&lt;li&gt;产品在完成前总面临着陈旧过时的威胁；只有实际需要时，才会用到最新的设想&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;第2章-人月神话&#34;&gt;第2章 人月神话&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;缺乏合理的时间进度是造成项目滞后的最主要原因，它比其他所有因素的总和影响还大&lt;/li&gt;&#xA;&lt;li&gt;良好的烹饪需要时间，某些任务无法在不损害结果的情况下加快速度&lt;/li&gt;&#xA;&lt;li&gt;所有的编程人员都是乐观主义者：&amp;ldquo;一切都将运作良好&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;由于编程人员通过纯粹的思维活动来开发，所以我们期待在实现过程中不会碰到困难&lt;/li&gt;&#xA;&lt;li&gt;但是，我们的构思是有缺陷的，因此总会有bug。&lt;/li&gt;&#xA;&lt;li&gt;围绕着成本核算的估计技术，混淆了工作量和项目进展。&lt;strong&gt;人月是危险和带有欺骗性的神话，因为它暗示人员数量和时间是可以相互替换的&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;在若干人员中分解任务会引发额外的沟通工作量&amp;ndash;培训和相互沟通&lt;/li&gt;&#xA;&lt;li&gt;关于进度安排，我的经验是为1/3计划、1/6编码、1/4构件测试以及1/4系统测试&lt;/li&gt;&#xA;&lt;li&gt;作为一个学科，我们缺乏数据估计&lt;/li&gt;&#xA;&lt;li&gt;我们对自己的估计技术不确定，因此在管理和客户的压力下，我们常常缺乏坚持的勇气&lt;/li&gt;&#xA;&lt;li&gt;Brooks法则：为进度落后的项目增加人手，只会使进度更加落后&lt;/li&gt;&#xA;&lt;li&gt;向软件项目中增派人手从三个方面增加了项目必要的总体工作量：任务重新分配本身和所造成的工作中断；培训新人员；额外的相互沟通&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;第3章-外科手术队伍&#34;&gt;第3章 外科手术队伍&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;同样有两年经验而且在受到同样的培训的情况下，优秀的专业程序员的生产率是较差程序员的十倍（Sackman、Erikson和Grand）&lt;/li&gt;&#xA;&lt;li&gt;Sackman、Erikson和Grand的数据显示，经验和实际表现之间没有相互联系，我怀疑这种现象是否普遍成立。&lt;/li&gt;&#xA;&lt;li&gt;小型、精干队伍是最好的&amp;ndash;思绪尽可能少&lt;/li&gt;&#xA;&lt;li&gt;两个人的团队，其中一个是领导者，常常是最佳的人员使用方法（留意一下上帝对婚姻的设计）&lt;/li&gt;&#xA;&lt;li&gt;对于真正意义上的大型系统，小型精干的队伍太慢了&lt;/li&gt;&#xA;&lt;li&gt;实际上，绝大多数大型编程系统的经验显示，一拥而上的开发方法是高成本、速度缓慢、低效的，开发出的产品无法进行概念上的集成&lt;/li&gt;&#xA;&lt;li&gt;一位首席程序员、类似于外科手术队伍的团队架构提供了一种方法&amp;ndash;既能获得由少数头脑产生的产品完整性，又能得到多位协助人员的总体生产率，还彻底地减少了沟通的工作量&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;第4章-贵族专制民主政治和系统设计&#34;&gt;第4章 贵族专制、民主政治和系统设计&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&amp;ldquo;概念完整性是系统设计中最重要的考虑因素&amp;rdquo;。&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;功能与理解上的复杂程度的比值才是系统设计的最终测试标准&amp;rdquo;，而不仅仅是丰富的功能。（该比值是对易用性的一种测量，由简单和复杂应用共同验证）&lt;/li&gt;&#xA;&lt;li&gt;为了获得概念完整性，设计必须由一个人或者具有共识的小型团队来完成&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;对于非常大型的项目，将体系结构方面的工作与具体实现相分离是获得概念完整性的强有力方法。&amp;quot;（同样适用于小型项目）&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;如果要得到系统概念上的完整性，就必须有人控制这些概念。这实际上是一种无需任何歉意的贵族专制统治。&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;纪律、规则对行业是有益的。外部的体系结构规定实际上是增强，而不是限制实现小组的创造性&lt;/li&gt;&#xA;&lt;li&gt;概念上统一的系统能更快地开发和测试。&lt;/li&gt;&#xA;&lt;li&gt;体系结构（architecture）、设计实现（implementation）、物理实现（realization）的许多工作可以并发进行。（软件和硬件设计同样可以并行）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;第5章-画蛇添足&#34;&gt;第5章 画蛇添足&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;尽早交流和持续沟通能使结构师有较好的成本意识，使开发人员获得对设计的信心，并且不会混淆各自的责任分工。&lt;/li&gt;&#xA;&lt;li&gt;结构师如何成功地影响实现：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;牢记是开发人员承担创造性的实现责任；结构师只能提出建议&lt;/li&gt;&#xA;&lt;li&gt;时刻准备着为所指定的说明建议一种实现的方法，准备接受任何其他可行的方法&lt;/li&gt;&#xA;&lt;li&gt;对上述的建议保持低调和平静&lt;/li&gt;&#xA;&lt;li&gt;准备对所建议的改进放弃坚持&lt;/li&gt;&#xA;&lt;li&gt;听取开发人员在体系结构上改进的建议。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;第二个系统是人们所设计的最危险的系统，通常的倾向是过分地进行设计&lt;/li&gt;&#xA;&lt;li&gt;OS/360是典型的画蛇添足（second-system effect）的例子。（Windows NT似乎是20世纪90年代的例子）&lt;/li&gt;&#xA;&lt;li&gt;为功能分配一个字节和微秒的优先权值是一个很有价值的规范化方法&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;第6章-贯彻执行&#34;&gt;第6章 贯彻执行&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;即使是大型的设计团队，设计结果也必须由一个或两个人来完成，以确保这些决定是一致的&lt;/li&gt;&#xA;&lt;li&gt;必须明确定义体系结构中与先前定义不同的地方，重新定义的详细程度应该与原先的说明一致&lt;/li&gt;&#xA;&lt;li&gt;出于精确性的考虑，我们需要形式化地设计定义；同样，我们需要记叙性定义来加深理解&lt;/li&gt;&#xA;&lt;li&gt;必须采用形式化定义和记叙性定义中的一种作为标准，另一种作为辅助措施；它们都可以作为表达的标准&lt;/li&gt;&#xA;&lt;li&gt;设计实现，包括模拟仿真，可以充当一种体系结构的定义；这种方法有一些严重的缺点&lt;/li&gt;&#xA;&lt;li&gt;直接整合是一种强制推行软件的结构性标准的方法。（硬件上也是如此&amp;ndash;考虑内建在ROM中的Mac WIMP接口）&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;如果起初至少有两种以上的实现，（体系结构）定义会更加整洁和规范。&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;允许体系结构师对实现人员的询问做出电话应答解释是非常重要的，并且必须进行日志记录和整理发布。（电子邮件是现在可选的介质）&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;项目经理最好的朋友就是他每天要面对的对手&amp;ndash;独立的产品测试机构/小组。&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;第7章-为什么巴比伦塔会失败&#34;&gt;第7章 为什么巴比伦塔会失败？&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;巴比伦塔项目的失败是因为缺乏交流以及交流的结果&amp;ndash;组织。&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;因为左手不知道右手在做什么，从而进度灾难、功能的不合理和系统缺陷纷纷出现。&amp;ldquo;由于对其他人的各种假设，团队成员之间的理解开始出现偏差&lt;/li&gt;&#xA;&lt;li&gt;团队应该以尽可能多的方式进行相互之间的交流：非正式地进行简要技术陈述的常规项目会议，共享的正式项目工作手册（以及通过电子邮件）&lt;/li&gt;&#xA;&lt;li&gt;项目工作手册&amp;quot;不是独立的一篇文档，它是对项目必须产生的一系列文档进行组织的一种结构。&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;项目所有的文档都必须是该（工作手册）结构的一部分。&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;需要尽早和仔细地设计工作手册结构&lt;/li&gt;&#xA;&lt;li&gt;事先制订良好结构的工作手册&amp;quot;可以将后来书写的文字放置在合适的章节中&amp;rdquo;，并且可以提高产品手册的质量。&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;每一个团队成员应该了解所有的材料（工作手册）。&amp;quot;（我现在想说的是，每个团队成员应该能够看到所有材料，网页即可满足要求）&lt;/li&gt;&#xA;&lt;li&gt;实时更新是至关重要的&lt;/li&gt;&#xA;&lt;li&gt;工作手册的使用者应该将注意力集中在上次阅读后的变更以及关于这些变更重要性的评述上&lt;/li&gt;&#xA;&lt;li&gt;OS/360项目工作手册开始采用的是纸介质，后来换成了微缩胶片&lt;/li&gt;&#xA;&lt;li&gt;今天（即使在1975年），共享的电子手册是能达到所有这些目标的、更好的、更加低廉的、更加简单的机制&lt;/li&gt;&#xA;&lt;li&gt;仍然需要用变更条和修订日期（或具备同等功能的方法）来标记文字；仍然需要后进先出（LIFO）的电子化变更小结&lt;/li&gt;&#xA;&lt;li&gt;Parnas强烈地认为使每个人看到每件事的目标是完全错误的；各个部分应该被封装，从而没有人需要或者允许看到其他部分的内部结构，只需要了解接口&lt;/li&gt;&#xA;&lt;li&gt;Parnas的建议的确是灾难的处方。 （Parnas让我认可了该观点，是我彻底地改变了想法）&lt;/li&gt;&#xA;&lt;li&gt;团队组织的目标是为了减少必要的交流和协作量&lt;/li&gt;&#xA;&lt;li&gt;为了减少交流，组织结构包括了人力划分（division of labor）和限定职责范围（specialization of function&lt;/li&gt;&#xA;&lt;li&gt;传统的树状组织结构反映了权力的结构原理&amp;ndash;不允许双重领导&lt;/li&gt;&#xA;&lt;li&gt;组织中的交流是网状，而不是树状结构，因此所有的特殊组织机制（往往体现成组织结构图中的虚线部分）都是为了进行调整，以克服树状组织结构中交流缺乏的困难&lt;/li&gt;&#xA;&lt;li&gt;每个子项目具有两个领导角色&amp;ndash;产品负责人，技术主管或结构师。这两个角色的职能有着很大的区别，需要不同的技能&lt;/li&gt;&#xA;&lt;li&gt;两种角色的任意组合都可以是非常有效的：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;产品负责人和技术主管是同一个人&lt;/li&gt;&#xA;&lt;li&gt;产品负责人作为总指挥，技术主管充当其左右手&lt;/li&gt;&#xA;&lt;li&gt;技术主管作为总指挥，产品负责人充当其左右手&#xA;着很大的区别，需要不同的技能。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;第8章-胸有成竹&#34;&gt;第8章 胸有成竹&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;仅仅通过对编码部分的估计，然后乘以任务其他部分的相对系数，是无法得出对整项工作的精确估计的。&lt;/li&gt;&#xA;&lt;li&gt;构建独立小型程序的数据不适用于编程系统项目。&lt;/li&gt;&#xA;&lt;li&gt;程序开发随程序规模的大量增长而增长。&lt;/li&gt;&#xA;&lt;li&gt;一些发表的研究报告显示指数约为1.5。（Boehm的数据并不完全一致，在1.05和1.2之间变化。）&lt;/li&gt;&#xA;&lt;li&gt;Portman的ICL数据显示，相对于其他活动，全职程序员仅将50％的时间用于编程和调试。&lt;/li&gt;&#xA;&lt;li&gt;IBM的Aron的数据显示，生产率是系统各个部分交互的函数，在1.5千代码行/人年至10千代码行/人年的范围内变化。&lt;/li&gt;&#xA;&lt;li&gt;Harr的Bell实验室数据显示，对于已完成的产品，操作系统类的生产率大约是0.6千LOC/人年，编译类工作的生产率大约为2.2千LOC/人年。&lt;/li&gt;&#xA;&lt;li&gt;Brooks的OS/360数据与Harr的数据一致：操作系统0.6～0.8千LOC/人年，编译器2～3 千LOC/人年。&lt;/li&gt;&#xA;&lt;li&gt;Corbato的MIT项目MULTICS数据显示，在操作系统和编译器混合类型上的生产率是1.2千LOC/人年，但这些是PL/I的代码行，而其他所有的数据是汇编代码行。&lt;/li&gt;&#xA;&lt;li&gt;在基本语句级别，生产率看上去是一个常数。&lt;/li&gt;&#xA;&lt;li&gt;当使用适当的高级语言时，程序编制的生产率可以提高5倍。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;第9章-削足适履&#34;&gt;第9章 削足适履&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;除了运行时间以外，所占据的内存空间也是主要开销。特别是对于操作系统，它的很多程序是永久驻留在内存中。&lt;/li&gt;&#xA;&lt;li&gt;即便如此，花费在驻留程序所占据内存上的金钱仍是物有所值的，比其他任何在配置上投资的效果要好。规模本身不是坏事，但不必要的规模是不可取的。&lt;/li&gt;&#xA;&lt;li&gt;软件开发人员必须设立规模目标，控制规模，发明一些减少规模的方法&amp;ndash;就如同硬件开发人员为减少元器件所做的事情一样。&lt;/li&gt;&#xA;&lt;li&gt;规模预算不仅仅在占据内存方面是明确的，同时还应该指明程序对磁盘的访问次数。&lt;/li&gt;&#xA;&lt;li&gt;规模预算必须与分配的功能相关联；在指明模块大小的同时，确切定义模块的功能。&lt;/li&gt;&#xA;&lt;li&gt;在大型的团队中，各个小组倾向于不断地局部优化，以满足自己的目标，而较少考虑对用户的整体影响。这种方向性的问题是大型项目的主要危险。&lt;/li&gt;&#xA;&lt;li&gt;在整个实现的过程期间，系统结构师必须保持持续的警觉，确保连贯的系统完整性。&lt;/li&gt;&#xA;&lt;li&gt;从系统整体出发以及面向用户的态度是软件编程管理人员最重要的职能。&lt;/li&gt;&#xA;&lt;li&gt;在早期应该制订策略，以决定用户可选项目的粗细程度，因为将它们作为整体打包能够节省内存空间（常常还可以节约市场成本）。&lt;/li&gt;&#xA;&lt;li&gt;暂存区空间的尺寸，以及每次磁盘访问的程序数量是很关键的决策，因为性能是规模的非线性函数。（这个整体决策已显得过时&amp;ndash;起初是由于虚拟内存，后来则是成本低廉的内存。现在的用户通常会购买能容纳主要应用程序所有代码的内存。）&lt;/li&gt;&#xA;&lt;li&gt;为了取得良好的空间－时间折衷，开发队伍需要得到特定的某种语言或者机型的编程技能培训，特别是在使用新语言或者新机器时。&lt;/li&gt;&#xA;&lt;li&gt;编程需要技术积累，每个项目需要自己的标准组件库。&lt;/li&gt;&#xA;&lt;li&gt;库中的每个组件需要有两个版本，运行速度较快和短小精炼的。（现在看来有些过时。）&lt;/li&gt;&#xA;&lt;li&gt;精炼、充分和快速的程序。往往是&lt;strong&gt;战略性&lt;/strong&gt;突破的结果，而不仅仅技巧上的提高。&lt;/li&gt;&#xA;&lt;li&gt;这种突破常常是一种新型算法。&lt;/li&gt;&#xA;&lt;li&gt;更普遍的是，战略上突破常来自于数据或表的重新表达。&lt;strong&gt;数据的表现形式是编程的根本&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;第10章-提纲挈领&#34;&gt;第10章 提纲挈领&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;“前提：在一片文件的汪洋中，少数文档形成了关键的枢纽，每个项目管理的工作都围绕着它们运转。它们是经理们的主要个人工具。”&lt;/li&gt;&#xA;&lt;li&gt;对于计算机硬件开发项目，关键文档是目标、手册、进度、预算、组织机构图、空间分配、以及机器本身的报价、预测和价格。&lt;/li&gt;&#xA;&lt;li&gt;对于大学科系，关键文档类似于目标、课程描述、学位要求、研究报告、课程表和课程的安排、预算、教室分配、教师和研究生助手的分配。&lt;/li&gt;&#xA;&lt;li&gt;对于软件项目，要求是相同的：目标、用户手册、内部文档、进度、预算、组织机构图和工作空间分配。&lt;/li&gt;&#xA;&lt;li&gt;因此，即使是小型项目，项目经理也应该在项目早期对上述的一系列文档进行规范化。&lt;/li&gt;&#xA;&lt;li&gt;以上集合中每一个文档的准备工作都将注意力集中在思索和对讨论的提炼上，而书写这项活动需要上百次的细小决定。正是由于它们的存在，人们才能从令人迷惑的现象中得到清晰、确定的策略。&lt;/li&gt;&#xA;&lt;li&gt;对每个关键文档的维护提供了状态监督和预警机制。&lt;/li&gt;&#xA;&lt;li&gt;每个文档本身就可以作为检查列表或者数据库。&lt;/li&gt;&#xA;&lt;li&gt;项目经理的基本职责是使每个人都向着相同的方向前进。&lt;/li&gt;&#xA;&lt;li&gt;项目经理的主要日常工作是沟通，而不是做出决定；文档使各项计划和决策在整个团队范围内得到交流。&lt;/li&gt;&#xA;&lt;li&gt;只有一小部分管理人员的时间&amp;ndash;可能只有20%&amp;ndash;用来从自己头脑外部获取信息。&lt;/li&gt;&#xA;&lt;li&gt;出于这个原因，广受吹捧的市场概念&amp;ndash;支持管理人员的“完备信息管理系统”并不基于反映管理人员行为的有效模型。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;第11章-未雨绸缪&#34;&gt;第11章 未雨绸缪&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;化学工程师已经认识到无法一步将实验室工作台上的反应过程移到工厂中，需要一个试验性工厂（pilot planet）来为提高产量和在缺乏保护的环境下运作提供宝贵经验。&lt;/li&gt;&#xA;&lt;li&gt;对于编程产品而言，这样的中间步骤同样是必要的，但是软件工程师在着手发布产品之前，却并不会常规地进行试验性系统的现场测试。（现在，这已经成为了一项普遍的实践，beta版本不同于有限功能的原型，alpha版本同样是我所倡导的实践。）&lt;/li&gt;&#xA;&lt;li&gt;第一个开发的系统对于大多数项目并不合用。它可能太慢、太大，而且难以使用，或者三者兼而有之。&lt;/li&gt;&#xA;&lt;li&gt;系统的丢弃和重新设计可以一步完成，也可以一块块地实现，但这是&lt;strong&gt;必须完成&lt;/strong&gt;的步骤。&lt;/li&gt;&#xA;&lt;li&gt;将开发的第一个系统&amp;ndash;丢弃原型&amp;ndash;发布给用户，可以获得时间，但是它的代价高昂&amp;ndash;对于用户，使用极度痛苦；对于重新开发的人员，分散了精力；对于产品，影响了声誉，即使最好的再设计也难以挽回名声。&lt;/li&gt;&#xA;&lt;li&gt;因此，&lt;strong&gt;为舍弃而计划，无论如何，你一定要这样做&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;“开发人员交付的是用户满意程度，而不仅仅是实际的产品。”（Cosgrove）&lt;/li&gt;&#xA;&lt;li&gt;用户的实际需要和用户感觉会随着程序的构建、测试和使用而变化。&lt;/li&gt;&#xA;&lt;li&gt;软件产品易于掌握的特性和不可见性，导致它的构建人员（特别容易）面临着永恒的需求变更。&lt;/li&gt;&#xA;&lt;li&gt;目标上（和开发策略上）的一些正常变化无可避免，事先为它们做准备总比假设它们不会出现要好得多。&lt;/li&gt;&#xA;&lt;li&gt;为变更而计划软件产品的技术，特别是拥有细致的模块接口文档的结构化编程广为人知，但并没有相同规模的实践。尽可能地使用表驱动技术同样是有所帮助的。（现在内存的成本和规模使这项技术越来越出众。）&lt;/li&gt;&#xA;&lt;li&gt;高级语言的使用、编译时操作、通过引用的声明整合和自文档技术能减少变更引起的错误。&lt;/li&gt;&#xA;&lt;li&gt;采用定义良好的数字化版本将变更量子（阶段）化（当今的标准实践。）&lt;/li&gt;&#xA;&lt;li&gt;程序员不愿意为设计书写文档，不仅仅是因为惰性，更多的是源于设计人员的踌躇&amp;ndash;要为自己尝试性的设计决策进行辩解。（Cosgrove）&lt;/li&gt;&#xA;&lt;li&gt;为变更组建团队比为变更进行设计更加困难。&lt;/li&gt;&#xA;&lt;li&gt;只要管理人员和技术人才的天赋允许，老板必须对他们的能力培养给予极大的关注，使管理人员和技术人才具有互换性；特别是希望在技术和管理角色之间自由地分配人手的时候。&lt;/li&gt;&#xA;&lt;li&gt;具有两条晋升线的高效组织机构存在着一些社会性的障碍，人们必须警惕并积极地同它做持续的斗争。&lt;/li&gt;&#xA;&lt;li&gt;很容易为不同的晋升线建立相互一致的薪水级别，但同等威信的建立需要一些强烈的心理措施：相同的办公室、一样的支持和技术调动的优先补偿。&lt;/li&gt;&#xA;&lt;li&gt;组建外科手术队伍式的软件开发团队是对上述问题所有方面的彻底冲击。对于灵活组织架构问题，这的确是一个长期行之有效的解决方案。&lt;/li&gt;&#xA;&lt;li&gt;程序维护基本上不同于硬件的维护；它主要由各种变更组成，如修复设计缺陷、新增功能、或者是使用环境或配置变换引起的调整。&lt;/li&gt;&#xA;&lt;li&gt;对于一个广泛使用的程序，其维护总成本通常是开发成本的40％或更多。&lt;/li&gt;&#xA;&lt;li&gt;维护成本受用户数目的严重影响。用户越多，所发现的错误也越多。&lt;/li&gt;&#xA;&lt;li&gt;Campbell指出了一个显示产品生命期中每月bug数的有趣曲线，其先是下降，然后上升。&lt;/li&gt;&#xA;&lt;li&gt;缺陷修复总会以20%~50%的机率引入新的bug。&lt;/li&gt;&#xA;&lt;li&gt;每次修复之后，必须重新运行先前所有的测试用例，确保系统不会以更隐蔽的方式被破坏。&lt;/li&gt;&#xA;&lt;li&gt;能消除、至少是能指明副作用的程序设计方法，对维护成本有很大的影响。&lt;/li&gt;&#xA;&lt;li&gt;同样，设计实现的人员越少、接口越少，产生的错误也就越少。&lt;/li&gt;&#xA;&lt;li&gt;Lehman和Belady发现，模块数量随大型操作系统（OS/360）版本号的增加呈线性增长，但是模块随版本号指数的增长而受到影响。&lt;/li&gt;&#xA;&lt;li&gt;所有修改都倾向于破坏系统的架构，增加了系统的混乱程度（熵）。即使是最熟练的软件维护工作，也只是延缓了系统退化到不可修复的混乱状态的进程，以致必须要重新进行设计。（许多程序升级的真正需要，如性能等，尤其会冲击它的内部结构边界。原有边界引发的不足常常在日后才会出现。）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;第12章-干将莫邪&#34;&gt;第12章 干将莫邪&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;项目经理应该制订一套策略，并为通用工具的开发分配资源，与此同时，他还必须意识到专业工具的需求。&lt;/li&gt;&#xA;&lt;li&gt;开发操作系统的队伍需要自己的目标机器，进行调试开发工作。相对于最快的速度而言，它更需要最大限度的内存，还需要安排一名系统程序员，以保证机器上的标准软件是即时更新和实时可用的。&lt;/li&gt;&#xA;&lt;li&gt;同时还需要配备调试机器或者软件，以便在调试过程中，所有类型的程序参数可以被自动计数和测量。&lt;/li&gt;&#xA;&lt;li&gt;目标机器的使用需求量是一种特殊曲线：刚开始使用率非常低，突然出现爆发性的增长，接着趋于平缓。&lt;/li&gt;&#xA;&lt;li&gt;同天文工作者一样，大部分系统调试工作总是在夜间完成。&lt;/li&gt;&#xA;&lt;li&gt;抛开理论不谈，一次分配给某个小组的连续的目标时间块被证明是最好的安排方法，比不同小组的穿插使用更为有效。&lt;/li&gt;&#xA;&lt;li&gt;尽管技术不断变化，这种采用时间块来安排匮乏计算机资源的方式仍得以延续20年（在1975年），这是因为它的生产率最高。（在1995年依然如此）&lt;/li&gt;&#xA;&lt;li&gt;如果目标机器是新产品，则需要一个目标机器的逻辑仿真装置。这样，可以更快地得到辅助调试平台。即使在真正机器出现之后，仿真装置仍可提供可靠的调试平台。&lt;/li&gt;&#xA;&lt;li&gt;主程序库应该被划分成：（1）一系列独立的私有开发库；（2）正处在系统测试下的系统集成子库；（3）发布版本。正式的分离和进度提供了控制。&lt;/li&gt;&#xA;&lt;li&gt;在编制程序的项目中，节省最大工作量的工具可能是文本编辑系统。&lt;/li&gt;&#xA;&lt;li&gt;系统文档中的巨大容量带来了新的不易理解问题（例如，看看Unix），但是它比大多数未能详细描述编程系统特性的短小文章更加可取。&lt;/li&gt;&#xA;&lt;li&gt;自顶向下、彻底地开发一个性能仿真装置。尽可能早地开始这项工作，仔细地听取 “它们表达的意见”。&lt;/li&gt;&#xA;&lt;li&gt;只有懒散和惰性会妨碍高级语言和交互式编程的广泛应用。（如今它们已经在全世界使用。）&lt;/li&gt;&#xA;&lt;li&gt;高级语言不仅提升了生产率，还改进了调试：bug更少，而且更容易寻找。&lt;/li&gt;&#xA;&lt;li&gt;传统的反对意见&amp;ndash;功能、目标代码的尺寸、目标代码的速度，随着语言和编译器技术的进步已不再成为问题。&lt;/li&gt;&#xA;&lt;li&gt;现在可供系统编程合理选择的语言是PL/I。（不再正确。）&lt;/li&gt;&#xA;&lt;li&gt;某些应用上，批处理系统决不会被交互式系统所替代。（依然成立。）&lt;/li&gt;&#xA;&lt;li&gt;调试是系统编程中较慢和较困难的部分，而漫长的调试周转时间是调试的祸根。&lt;/li&gt;&#xA;&lt;li&gt;有限的数据表明，系统软件开发中，交互式编程的生产率至少是原来的两倍。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;第13章-整体部分&#34;&gt;第13章 整体部分&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;第4、5、6章所意味的煞费苦心、详尽体系结构工作不但使产品更加易于使用，而且使开发更容易进行且bug更不容易产生。&lt;/li&gt;&#xA;&lt;li&gt;Vyssotsky提出，“许许多多的失败完全源于那些产品未精确定义的地方。”&lt;/li&gt;&#xA;&lt;li&gt;在编写任何代码之前，规格说明必须提交给外部测试小组，以详细地检查说明的完整性和明确性。开发人员自己无法完成这项工作。（Vyssotsky）&lt;/li&gt;&#xA;&lt;li&gt;“十年内（1965～1975年），Wirth自上向下地进行设计（逐步细化）将会是最重要的新型形式化软件开发方法。”&lt;/li&gt;&#xA;&lt;li&gt;Wirth主张，在每个步骤中，都尽可能地使用级别较高的表达方法。&lt;/li&gt;&#xA;&lt;li&gt;好的自上向下的设计从四个方面避免了bug。&lt;/li&gt;&#xA;&lt;li&gt;有时必须回退，推翻顶层设计，重新开始。&lt;/li&gt;&#xA;&lt;li&gt;结构化编程中，程序的控制结构仅由支配代码块（相对于任意的跳转）的给定集合所组成。这种方法很好地避免了bug，是一种正确的思考方式。&lt;/li&gt;&#xA;&lt;li&gt;Gold的试验结果显示，在交互式调试过程中，第一次交互取得的工作进展是后续交互的3倍。这实际上获益于在调试开始之前仔细地调试计划。（我认为，在1995年依然如此。）&lt;/li&gt;&#xA;&lt;li&gt;我发现对良好（对交互式调试做出快速反应）系统的正确使用，往往要求每两小时的终端会话对应于两小时的桌面工作：1小时会话后的清理和文档工作；1小时为下一次计划变更和测试。&lt;/li&gt;&#xA;&lt;li&gt;系统调试（相对于单元测试）花费的时间会比预料的更长。&lt;/li&gt;&#xA;&lt;li&gt;系统调试的困难程度证明了需要一种完备系统化和可计划的方法。&lt;/li&gt;&#xA;&lt;li&gt;系统调试仅仅应该在所有部件能够运作之后开始。（这既不同于为了查出接口bug所采取的“合在一起尝试“的方法；也不同于在所有构件单元的bug已知但未修复的情况下，即开始系统调试的做法。对于多个团队尤其如此。）&lt;/li&gt;&#xA;&lt;li&gt;开发大量的辅助调试平台和测试代码是很值得的，代码量甚至可能有测试对象的一半。&lt;/li&gt;&#xA;&lt;li&gt;必须有人对变更进行控制和文档化，团队成员应使用开发库的各种受控拷贝来工作。&lt;/li&gt;&#xA;&lt;li&gt;系统测试期间，一次只添加一个构件。&lt;/li&gt;&#xA;&lt;li&gt;Lehman和Belady出示了证据，变更的阶段（量子）要么很大，间隔很宽；要么小且频繁。后者很容易变得不稳定。（Microsoft（微软）的一个团队使用了非常小而频繁的阶段（量子）。结果每天晚上需要重新编译生成增长中的系统。）&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;第14章-祸起萧墙&#34;&gt;第14章 祸起萧墙&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;“项目是怎样延迟了整整一年的时间的······ 一次一天。”&lt;/li&gt;&#xA;&lt;li&gt;一天一天的进度落后比起重大灾难更难以识别、更不容易防范和更加难以弥补。&lt;/li&gt;&#xA;&lt;li&gt;根据一个严格的进度表来控制大型项目的第一个步骤是制定进度表，进度表由里程碑和日期组成。&lt;/li&gt;&#xA;&lt;li&gt;里程碑必须是具体的、特定的和可度量的事件，能进行清晰的定义。&lt;/li&gt;&#xA;&lt;li&gt;如果里程碑定义得非常明确，以致于无法自欺欺人时，程序员很少会就里程碑的进展弄虚作假。&lt;/li&gt;&#xA;&lt;li&gt;对于大型开发项目中的估计行为，政府的承包商所做的研究显示：每两周进行仔细修订的活动时间估计，随着开始时间的临近不会有太大的变化；期间内对时间长短的过高估计，会随着活动的进行持续下降；过低估计直到计划的结束日期之前大约三周左右，才会有所变化。&lt;/li&gt;&#xA;&lt;li&gt;慢性进度偏离是士气杀手。（Microsoft的Jim McCarthy说：“如果你错过了一个最终期限（deadline），确保制订下一条最终期限。”）&lt;/li&gt;&#xA;&lt;li&gt;同优秀的棒球队伍一样，&lt;strong&gt;进取&lt;/strong&gt;对于杰出的软件开发团队是不可缺少的必要品德。&lt;/li&gt;&#xA;&lt;li&gt;不存在关键路径进度的替代品，使人们能够辨别计划偏移的情况。&lt;/li&gt;&#xA;&lt;li&gt;PERT的准备工作是PERT图使用中最有价值的部分。它包括了整个网状结构的展开、任务之间依赖关系的识别和各个任务链的估计。这些都要求在项目早期进行非常专业的计划。&lt;/li&gt;&#xA;&lt;li&gt;第一份PERT图总是很恐怖的，不过人们总是不断努力，运用才智来制订下一份PERT图。&lt;/li&gt;&#xA;&lt;li&gt;PERT图为那个使人泄气的借口，“其他的部分反正会落后”，提供了答案。&lt;/li&gt;&#xA;&lt;li&gt;每个老板同时需要采取行动的异常信息以及用来进行分析和早期预警的状态数据。&lt;/li&gt;&#xA;&lt;li&gt;状态的获取是困难的，因为下属经理有充分的理由不提供信息共享。&lt;/li&gt;&#xA;&lt;li&gt;老板的不良反应肯定会对信息的完全公开造成压制；相反，仔细区分状态报告、毫无惊慌地接收报告、决不越俎代庖，将能鼓励诚实的汇报。&lt;/li&gt;&#xA;&lt;li&gt;必须有评审机制，使所有成员可以通过它了解真正的状态。出于这个目的，里程碑的计划和完成文档是关键。&lt;/li&gt;&#xA;&lt;li&gt;Vyssotsky：“我发现在里程碑报告中很容易记录‘计划（老板的日期）’和‘估计（最基层经理的日期）’的日期。项目经理必须停止对估计日期的怀疑。”&lt;/li&gt;&#xA;&lt;li&gt;对于大型项目，一个对里程碑报告进行维护的&lt;strong&gt;计划和控制&lt;/strong&gt;小组是非常可贵的。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;第15章-另外一面&#34;&gt;第15章 另外一面&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;对于软件编程产品来说，程序向用户所呈现的面貌&amp;ndash;文档，与提供给机器识别的内容同样重要。&lt;/li&gt;&#xA;&lt;li&gt;即使是完全开发给自己使用的程序，描述性文字也是必须的，因为它们会被用户－作者所遗忘。&lt;/li&gt;&#xA;&lt;li&gt;培训和管理人员基本上没有向编程人员成功地灌输对待文档的积极态度&amp;ndash;文档能在整个生命周期对克服懒惰和进度的压力起促进和激励作用。&lt;/li&gt;&#xA;&lt;li&gt;这样的失败并不都是因为缺乏热情或者说服力，而是没能正确地展示如何有效和经济地编制文档。&lt;/li&gt;&#xA;&lt;li&gt;大多数文档只提供了很少的总结性内容。必须放慢脚步，稳妥地进行。&lt;/li&gt;&#xA;&lt;li&gt;由于关键的用户文档包含了与软件相关的基本决策，因此它的绝大部分需要在程序编制之前书写，它包括了9项内容（参见相应章节）。&lt;/li&gt;&#xA;&lt;li&gt;每一份发布的程序拷贝应该包括一些测试用例，其中一部分用于校验输入数据，一部分用于边界输入数据，另一部分用于无效的输入数据。&lt;/li&gt;&#xA;&lt;li&gt;对于必须修改程序的人而言，他们需要程序内部结构文档，同样要求一份清晰明了的概述，它包括了5项内容（参见相应章节）。&lt;/li&gt;&#xA;&lt;li&gt;流程图是被吹捧得最过分的一种程序文档。详细逐一记录的流程图是一件令人生厌的事情，而且高级语言的出现使它显得陈旧过时。（流程图是图形化的高级语言。）&lt;/li&gt;&#xA;&lt;li&gt;如果这样，很少有程序需要一页纸以上的流程图。（在这一点上，MILSPEC军用标准文档需求实在错得很厉害。）&lt;/li&gt;&#xA;&lt;li&gt;即使的确需要一张程序结构图，也并不需要遵照ANSI的流程图标准。&lt;/li&gt;&#xA;&lt;li&gt;为了使文档易于维护，将它们合并至源程序是至关重要的，而不是作为独立文档进行保存。&lt;/li&gt;&#xA;&lt;li&gt;最小化文档负担的3个关键思路：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;借助那些必须存在的语句，如名称和声明等，来附加尽可能多的&amp;quot;文档&amp;quot;信息。&lt;/li&gt;&#xA;&lt;li&gt;使用空格和格式来表现从属和嵌套关系，提高程序的可读性。&lt;/li&gt;&#xA;&lt;li&gt;以段落注释，特别是模块标题的形式，向程序中插入必要的记叙性文字。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;程序修改人员所使用的文档中，除了描述事情如何，还应阐述它为什么那样。对于加深理解，目的是非常关键的，即使是高级语言的语法，也不能表达目的。&lt;/li&gt;&#xA;&lt;li&gt;在线系统的高级语言（应该使用的工具）中，自文档化技术发现了它的绝佳应用和强大功能。&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>乐理基础</title>
      <link>http://localhost:1313/music/music-theory/</link>
      <pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/music/music-theory/</guid>
      <description>&lt;h2 id=&#34;1-乐音体系&#34;&gt;1. 乐音体系&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;音的四种性质：&lt;/strong&gt; 高低，长短，强弱、音色。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;噪音：&lt;/strong&gt; 振动不规则，音的高低听起来不明显。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;乐音体系：&lt;/strong&gt; 音乐中所使用的基本的乐音的总和。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;音级：&lt;/strong&gt; 乐音体系中的各音（专指乐音）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;音列：&lt;/strong&gt; 按一定的音高关系和高低次序，由低到高或由高到低排列。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;半音：&lt;/strong&gt; 乐音体系中，音高关系的最小计量单位。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;全音：&lt;/strong&gt; 半音和半音相加。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;音名：&lt;/strong&gt; C D E F G A B 也叫基本音级，一个音级到下一个的距离为“八度”，do re mi fa sol la si 这些音名多用于歌唱，故叫&lt;strong&gt;唱名&lt;/strong&gt;。&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/1da147feb3b421d5ef6f69cd18e1be98.webp&#34; alt=&#34;音名和唱名&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;变化音级：&lt;/strong&gt; 将基本音级加以升高或降低得来的音。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;升级音级：&lt;/strong&gt; 将基本音级升高半音，如&lt;sup&gt;#&lt;/sup&gt;C、&lt;sup&gt;#&lt;/sup&gt;D、相反是&lt;strong&gt;降级音级&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;重升音级：&lt;/strong&gt; 将基本音级升高全音，如&lt;sup&gt;x&lt;/sup&gt;C、&lt;sup&gt;x&lt;/sup&gt;D等，反之为&lt;strong&gt;重降音级&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;音组：&lt;/strong&gt; 乐音体系中八十多个音用来区分音分为若干组，它的标记是用字母加数字“1”来表示。比小字一组高的各组，由低到高名为“小字二组”、“小字三组”、“小字四组”、“小字五组”。依次写上数字“2”、“3”、“4”、“5”。比小字一组低的各组，由高到低依次定名为“小字组”、“大字组”、“大字一组”、“大字二组”。小字组用小写字母，数字写在音名右上方，如c&lt;sup&gt;1&lt;/sup&gt;。大字组用大写字母，数字写在音名右下方，如C&lt;sub&gt;1&lt;/sub&gt;。&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/d7d03a18ef3153b165c514ae7185d692.webp&#34; alt=&#34;音组&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;音域：&lt;/strong&gt; 从低音到高音，音列的总范围。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;音区：&lt;/strong&gt; 音域中的一部分。根据音色的不同分为高音区、中音区和低音区。小字组、小字一组、小字二组被认为是中音区，小字三，小字四，五为高音区，大字组，大字一组和二组为低音区。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;2-音律&#34;&gt;2. 音律&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;标准音：&lt;/strong&gt; 目前国际通用的标准高度是以440Hz的小字一组的a为标准，因此a&lt;sup&gt;1&lt;/sup&gt;就成了标准音。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;中央C：&lt;/strong&gt; 位于乐音体系中央的小字一组的c&lt;sup&gt;1&lt;/sup&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;定律法：&lt;/strong&gt; 确定乐音体系中各音的绝对准确高度，人们在实践中创造了各种定律法。如十二平均律，五度相生律、纯律等。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;十二平均律：&lt;/strong&gt; 将一个纯八度（如c&lt;sup&gt;1&lt;/sup&gt;-c&lt;sup&gt;2&lt;/sup&gt;）分成十二个均等的部分。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;等音：&lt;/strong&gt; 音高相同而记法和意义不同的音。如&lt;sup&gt;#&lt;/sup&gt;C、&lt;sup&gt;b&lt;/sup&gt;D，&lt;sup&gt;x&lt;/sup&gt;B，这三个音在钢琴上音高是完全相同的，但记法和意义不同。可以看出，除了&lt;sup&gt;#&lt;/sup&gt;G和&lt;sup&gt;b&lt;/sup&gt;A只有一个等音外，其他各音都有两个等音。&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/49f603e8236bd67d4381e62637e100b5.webp&#34; alt=&#34;等音&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;基音：&lt;/strong&gt; 由全弦振动产生的音，听的最清楚的最响的音。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;泛音：&lt;/strong&gt; 由发音体各部分振动而产生，不易被听出的音。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;3调式&#34;&gt;3.调式&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;调式：&lt;/strong&gt; 若干音（3-7个）按照一定的关系（高低、稳定，不稳定）联结在一起，构成一个体系，并以某一个音为中心的体系。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;大调式：&lt;/strong&gt; 简称大调，是一种由七个音构成的一种调式，其稳定音合在一起构成一个大三和弦，不稳定音以二度音程关系倾向于稳定音，构成旋律进行的基本音调。根本特征表现为主音上方的大三度。分为三种：自然大调、和声大调和旋律大调。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;自然大调&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/9afb330ce150a1f57deeecef0b76e0fc.webp&#34; alt=&#34;自然大调&#34;&gt;&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/c6508dfb9ca9633dbae7eb4aa83f3fe9.webp&#34; alt=&#34;自然大调&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;和声大调&lt;/li&gt;&#xA;&lt;li&gt;旋律大调&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;音阶：&lt;/strong&gt; 调式中的音，从主音开始到主音结束，按高低次序排列起来。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;等音调：&lt;/strong&gt; 根据十二平均律所有半音相等的理论，不仅产生了等音、等音程、等和弦，还产生了等音调。就是两个调之间的所有音都是等音关系。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;黑键开始的等音调：&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/892e29b4c45557b4d57627d75ce3c052.webp&#34; alt=&#34;等音调&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;常用的15个大调&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/05d506eac9e52db856719a930ca4d37c.webp&#34; alt=&#34;常用的15个大调&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;首调：&lt;/strong&gt; 任何一个大调的首音的唱名都为do，其他音依次类推&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;固定调：&lt;/strong&gt; 音名C D E F G A B固定对应唱名do re mi fa sol la si&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;原调、移调、转调、离调：&lt;/strong&gt; &lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/b597c2f577f27b25260b631d5480bd98.webp&#34; alt=&#34;原调、移调、转调、离调&#34;&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;4-节奏节拍&#34;&gt;4. 节奏节拍&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;节拍：&lt;/strong&gt; 有强有弱的相同时间片断，按照一定的次序循环重复。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;节奏：&lt;/strong&gt; 用强弱组织起来的音的长短关系。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;拍子：&lt;/strong&gt; 节拍的&lt;em&gt;单位拍&lt;/em&gt;，用固定的音符来代表，叫做“拍子”。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;拍号：&lt;/strong&gt; 表示拍子的记号。拍号用分数的形式标记。&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/e31bce8918eaeb58434302f02bc8f528.webp&#34; alt=&#34;拍号中的强弱关系&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;小节：&lt;/strong&gt; 在乐曲中，由一个强拍到次一强拍之间的部分。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;小节线：&lt;/strong&gt; 永远作为强拍的标记写在强拍的前面&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;弱起小节：&lt;/strong&gt; 乐曲由弱拍或次强拍开始。是不完全小节，结尾一般也是不完全小节，两个不完全小节合在一起成为一个完全小节。&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/d10695ef8fa9675c9e058015731052da.webp&#34; alt=&#34;弱起小节&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;单拍子：&lt;/strong&gt; 每小节有两拍或三拍，只有一个强拍，并且也存在弱拍。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;复拍子：&lt;/strong&gt; 由完全相同的单拍子结合在一起。&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/baaca7841fdde8e3cf095c54528bef50.webp&#34; alt=&#34;复拍子&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;混合拍子：&lt;/strong&gt; 由不同的单拍子按照不同的次序结合。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;一拍子：&lt;/strong&gt; 每小节一拍，每拍都是强拍，没有弱拍。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;散拍子：&lt;/strong&gt; 拍子的强音位置和单位拍的时值都不是十分明显，也不固定。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;变换拍子：&lt;/strong&gt; 各种拍子交替出现（拍号至少发生过一次改变）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;速度与情绪：&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;具体的速度&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/bdf5effaba829fc3226e7bd0a74e6046.webp&#34; alt=&#34;具体的速度&#34;&gt;&lt;/li&gt;&#xA;&lt;li&gt;抽象的速度&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/e46261a518d00c011ee83043e775ca18.webp&#34; alt=&#34;抽象的速度&#34;&gt;&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/892cd6f9aa08149e1b2553c49886da0f.webp&#34; alt=&#34;抽象的速度&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;切分：&lt;/strong&gt; 改变了拍的内部强弱关系。&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/f72771d915cadebc28fdb7eafd1f9f62.webp&#34; alt=&#34;切分&#34;&gt;&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/a02861e6148964a6cdcff1a2e2773e35.webp&#34; alt=&#34;image.png&#34;&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;5-音程&#34;&gt;5. 音程&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;音程：&lt;/strong&gt; 在乐音体系中，两音之间的高低关系。&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/84d9db5d9d9bb16fd411bc14ef1226d3.webp&#34; alt=&#34;&#34;&gt;&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/5c9f3d72eaad9c82bfcdf6408a5c5aa8.webp&#34; alt=&#34;&#34;&gt;&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/caef4dea42a6e24376b8c956c92debf2.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>模唱练习</title>
      <link>http://localhost:1313/%E6%A8%A1%E5%94%B1%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/%E6%A8%A1%E5%94%B1%E7%BB%83%E4%B9%A0/</guid>
      <description>&lt;p&gt;1、能够迅速唱出一个音对应的唱名&#xA;&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/c732a578436bed86f281ce70720a2c4d.webp&#34; alt=&#34;第一步&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;2、模唱：唱准一个音&#xA;&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/cac1181f838a63ead1f9cb8104532600.webp&#34; alt=&#34;第二步&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;3、培养相对音高的感觉&#xA;&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/f52989fe8f3ade5d1fed60de2aef975b.webp&#34; alt=&#34;image.png&#34;&gt;&#xA;附：（红色标记表示高音）&#xA;&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/ef958103a1cb58031758258f6cfcb461.webp&#34; alt=&#34;训练&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>摄影基础</title>
      <link>http://localhost:1313/photography/basic-photography-learning/</link>
      <pubDate>Thu, 29 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/photography/basic-photography-learning/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;mark style=&#34;background: #FF5582A6;&#34;&gt;在平凡中拍摄到不凡的瞬间&lt;/mark&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;1-序&#34;&gt;1. 序&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;摄影就是记录下您到达并发现的、触动您内心的场景及瞬间&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;11-基础知识总览&#34;&gt;1.1 基础知识总览&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/15320aa56d6a639f1f22c951c065351d.webp&#34; alt=&#34;知识总览&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-取景&#34;&gt;2. 取景&lt;/h2&gt;&#xA;&lt;h3 id=&#34;21-焦距&#34;&gt;2.1 焦距&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;焦距越短，拍摄的视野越宽，取景范围越广，画面中容纳的景物越多，每个景物在画面中占的面积越小&lt;/li&gt;&#xA;&lt;li&gt;焦距越长，拍摄的视野越窄，取景范围越窄，画面中容纳的景物越少，每个景物在画面中占的面积越大&#xA;&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/038dfebe9ec383873ac7b0e0d141d8d4.webp&#34; alt=&#34;焦距图例|400&#34;&gt;&#xA;&lt;strong&gt;等效焦距&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/47859f07342669e00badf8baa83df14b.webp&#34; alt=&#34;画幅尺寸&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;公式：实际焦距 * 焦距转换系数 = 等效焦距&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;全画幅相机只能用全画幅镜头。&lt;/li&gt;&#xA;&lt;li&gt;全画幅镜头既可以用在全画幅相机上，也可以用在半画幅相机（APS-C画幅相机的俗称）上。&lt;/li&gt;&#xA;&lt;li&gt;可换镜头上面标注的焦距都是实际焦距。全画幅镜头和半画幅专用镜头都是如此。&lt;/li&gt;&#xA;&lt;li&gt;只要是半画幅机身，不管用什么镜头，就一定要通过焦距转换系数求得等效焦距。&lt;/li&gt;&#xA;&lt;li&gt;全画幅系数是1，就是不需要计算，等效焦距就是实际焦距。尼康、索尼、宾得、富士半画幅相机的焦距转换系数是1.5。佳能半画幅相机的焦距转换系数是1.6。奥之心和松下的M/43系统是2。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;22-透视&#34;&gt;2.2 透视&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;透视就是指近大远小，透视永远客观存在&lt;/li&gt;&#xA;&lt;li&gt;拍摄距离越近，透视效果越明显；拍摄距离越远，透视效果越不明显，直到可能看不出来&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;23-如何取景&#34;&gt;2.3 如何取景&lt;/h3&gt;&#xA;&lt;p&gt;中心思想：更好的表达&lt;mark style=&#34;background: #FFB8EBA6;&#34;&gt;“主题”&lt;/mark&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;取景范围：取景进画面的元素要尽量对主题有帮助，至少不能影响主题的表达&lt;/li&gt;&#xA;&lt;li&gt;取景角度：帮助照片中的主体展现不同的状态，决定画面中有哪些元素&lt;/li&gt;&#xA;&lt;li&gt;取景时机：记录精彩瞬间（可以借助连拍，视频等功能）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;24-取景常见问题&#34;&gt;2.4 取景常见问题&lt;/h3&gt;&#xA;&lt;p&gt;拍摄时应该思考的问题&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;景色并不好看&lt;/li&gt;&#xA;&lt;li&gt;主体处于不好的状态&lt;/li&gt;&#xA;&lt;li&gt;拍摄的角度并不好&lt;/li&gt;&#xA;&lt;li&gt;画面缺主体&lt;/li&gt;&#xA;&lt;li&gt;取景范围不对&lt;/li&gt;&#xA;&lt;li&gt;前景画蛇添足&lt;/li&gt;&#xA;&lt;li&gt;背景中有不该有的东西&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;25-取景的摄影语言&#34;&gt;2.5 取景的摄影语言&lt;/h3&gt;&#xA;&lt;p&gt;让拍摄的照片“更进一步”&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;控制取景范围营造反差&lt;/li&gt;&#xA;&lt;li&gt;不寻常的视角&lt;/li&gt;&#xA;&lt;li&gt;让画面更有代入感&lt;/li&gt;&#xA;&lt;li&gt;让画面更有冲击力&lt;/li&gt;&#xA;&lt;li&gt;善于利用前景&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;3-曝光&#34;&gt;3. 曝光&lt;/h2&gt;&#xA;&lt;h3 id=&#34;31-白加黑减&#34;&gt;3.1 “白加黑减”&lt;/h3&gt;&#xA;&lt;h4 id=&#34;311-影调&#34;&gt;3.1.1 影调&lt;/h4&gt;&#xA;&lt;p&gt;照片的明暗程度&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;中间调 - 18%灰（现实生活中所有物品的反射率）&lt;/li&gt;&#xA;&lt;li&gt;高调 - 比中间调亮的&lt;/li&gt;&#xA;&lt;li&gt;低调 - 比中间调暗的&#xA;&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/040f94d50c5c187eb932a01c0d28514d.webp&#34; alt=&#34;18度灰&#34;&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;312-测光&#34;&gt;3.1.2 测光&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;作用：相机衡量测光区域亮度的功能&lt;/li&gt;&#xA;&lt;li&gt;测光模式：测光区域、计算权重分配不同&#xA;&lt;ul&gt;&#xA;&lt;li&gt;点测光&lt;/li&gt;&#xA;&lt;li&gt;评价测光（矩阵测光、多重测光）&lt;mark style=&#34;background: #FFB86CA6;&#34;&gt;&lt;em&gt;√ 优选&lt;/em&gt;&lt;/mark&gt;&lt;/li&gt;&#xA;&lt;li&gt;&amp;hellip;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;相机开启后会一直测光&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;313-曝光补偿&#34;&gt;3.1.3 曝光补偿&lt;/h4&gt;&#xA;&lt;p&gt;曝光值是用来量化一张照片明暗程度（影调）的参数&#xA;&lt;img src=&#34;https://i-echo.oss-cn-shenzhen.aliyuncs.com/img/b979b943b8fef3f78446c3728431b7b3.webp&#34; alt=&#34;曝光补偿&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>动漫记录</title>
      <link>http://localhost:1313/navigation/anime/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/navigation/anime/</guid>
      <description>&lt;h2 id=&#34;2024&#34;&gt;2024&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;[3/16]  刀剑神域进击篇：暮色黄昏&lt;/li&gt;&#xA;&lt;li&gt;[3/23]  葬送的芙莉莲&lt;/li&gt;&#xA;&lt;li&gt;[9/30]  败犬女主太多了&lt;/li&gt;&#xA;&lt;li&gt;[10/3]  义妹生活&lt;/li&gt;&#xA;&lt;li&gt;[11/4]   杖与剑的魔剑谭&lt;/li&gt;&#xA;&lt;li&gt;[11/18]  鬼灭之刃 游郭篇&lt;/li&gt;&#xA;&lt;li&gt;[11/20]  鬼灭之刃 刀匠村篇&lt;/li&gt;&#xA;&lt;li&gt;[12/19]  剑来&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>图书记录</title>
      <link>http://localhost:1313/navigation/book/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/navigation/book/</guid>
      <description>&lt;h2 id=&#34;2024&#34;&gt;2024&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;[2/23]  道诡异仙&lt;/li&gt;&#xA;&lt;li&gt;[2/28]  小王子&lt;/li&gt;&#xA;&lt;li&gt;[3/2]  &lt;a href=&#34;http://localhost:1313/photography/basic-photography-learning/&#34;&gt;新摄影笔记&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;[3/6]  献给阿尔吉侬的花束&lt;/li&gt;&#xA;&lt;li&gt;[3/11]  &lt;a href=&#34;http://localhost:1313/book/the-mythical-man-month/&#34;&gt;人月神话&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;[5/23]  一九八四&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>影视记录</title>
      <link>http://localhost:1313/navigation/film-tv/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/navigation/film-tv/</guid>
      <description>&lt;h2 id=&#34;2024&#34;&gt;2024&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;[4/2]  1917&lt;/li&gt;&#xA;&lt;li&gt;[4/14]  至暗时刻&lt;/li&gt;&#xA;&lt;li&gt;[4/21]  血战钢锯岭&lt;/li&gt;&#xA;&lt;li&gt;[5/3]  西线无战事&lt;/li&gt;&#xA;&lt;li&gt;[11/9]  周处除三害&lt;/li&gt;&#xA;&lt;li&gt;[12/16]  白蛇：浮生&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
